function addArgs() {
  let sum = 0;

  for (let i = 0; i < arguments.length; i++) {
    sum += arguments[i];
  }

  return sum;
};

addArgs(4, 5, 6); // or any number of arguments

// -----------

function multiplyArgs() {
  // Implement...
  let mult = 1;
  
  Object.values(arguments).forEach((x) =>{ mult*=x;}
);
   // for (let i = 0; i < arguments.length; i++) {
    // mult *= arguments[i];
  // }
  
  return mult;
};

multiplyArgs(4, 5, 6);

/*********************************/
function addArgs() {
  let sum = 0;

  // Instead of: arguments.arrayMethod(arg1, arg2)
  // You can do: arrayMethodRef.call(arguments, arg1, arg2)

  Array.prototype.forEach.call(arguments, arg => {
    sum += arg;
  });

  return sum;
};

addArgs(4, 5, 6);
/******************/
function addArgs(...args) {
let sum=0;
args.forEach((x) =>{ sum+=x;});
return sum;
  
};

addArgs(3, 5, 6);
/*********************/
function addArgs(...args) {
  return args.reduce((acc, arg) => acc + arg);
};

addArgs(3, 5, 6);
/***********************/
function isOdd(e) {
  return e % 2 === 1;
}

// Complete the following line
// to make newArray = [1, 3] using a filter call
let newArray = [1, 2, 3].filter(x=>x%2===1);
 newArray = [1, 2, 3].filter(isOdd);

display.log(newArray);
/***********************/

const add = (a, b) => a + b;
const multiply = (a, b) => a * b;
const subtract = (a, b) => a - b;

function calculator() {
  let total = 0;

  function doOperation(operation, operand, callback) {
    total = operation(total, operand);
    // maybe invoke the callback...
    // "result" inside the callback is "total"        
    
    // maybe invoke the callback...
    // "result" inside the callback is "total"
    if(callback) callback(total);
    return doOperation;
  }

  return doOperation;
}

calculator()
  (add, 3)
  (multiply, 5)
  (subtract, 6, function(result) {
    display.log(result);
  });
/*************************************/
function sayHello() {
  display.log("hello");
};

var f = sayHello;

f.answer = 42;

display.log(sayHello.answer);
f();
/**************************************/

function parentFunction() {
  let a = 10;

  function double() {
    a = a+a;
    display.log(a);
  };

  function square() {
    a = a*a;
    display.log(a);
  }

  return { double, square };
}

let { double, square } = parentFunction();

double();
square();
double();
/**************************************/
let a = 1;

const closure1 = function() {
  display.log(a);
  a = 2
}

a = 3;

const closure2 = function() {
  display.log(a);
}

closure1();
closure2();

/**************************************/
/**************************************/
/**************************************/
/**************************************/
/**************************************/
/**************************************/
/**************************************/
